generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  role      UserRole  @default(VOLUNTEER)
  avatar    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  volunteer   Volunteer? @relation(fields: [volunteerId], references: [id])
  volunteerId String?    @unique

  @@map("users")
}

model Volunteer {
  id        String          @id @default(cuid())
  name      String
  email     String          @unique
  phone     String
  address   String
  birthday  DateTime
  status    VolunteerStatus @default(ACTIVE)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  attendances      Attendance[]
  user             User?
  notifications    Notification[]
  callParticipants CallParticipant[]

  @@map("volunteers")
}

model Attendance {
  id        String           @id @default(cuid())
  date      DateTime
  status    AttendanceStatus @default(PRESENT)
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  Volunteer   Volunteer @relation(fields: [volunteerId], references: [id])
  volunteerId String

  @@unique([volunteerId, date])
  @@map("attendances")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  volunteer   Volunteer @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  volunteerId String

  @@map("notifications")
}

model CallForVolunteers {
  id           String     @id @default(cuid())
  title        String
  description  String
  location     String?
  modality     Modality   @default(PRESENTIAL)
  requirements String?
  benefits     String?
  deadline     DateTime
  status       CallStatus @default(OPEN)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  participants  CallParticipant[]
  callQuestions CallQuestion[]
  callSchedules CallSchedule[]

  @@map("calls_for_volunteers")
}

model CallParticipant {
  id     String              @id @default(cuid())
  role   String?
  status ParticipationStatus @default(ENROLLED)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  volunteer   Volunteer @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  volunteerId String

  call   CallForVolunteers @relation(fields: [callId], references: [id], onDelete: Cascade)
  callId String

  callAnswers CallAnswer[]

  @@unique([volunteerId, callId])
  @@map("call_participants")
}

model CallQuestion {
  id       String       @id @default(cuid())
  question String
  type     QuestionType @default(TEXT)
  required Boolean      @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  call   CallForVolunteers @relation(fields: [callId], references: [id], onDelete: Cascade)
  callId String

  answers CallAnswer[]

  @@map("call_questions")
}

model CallAnswer {
  id     String @id @default(cuid())
  answer String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question   CallQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  participant   CallParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  participantId String

  @@map("call_answers")
}

model CallSchedule {
  id        String    @id @default(cuid())
  dayOfWeek WeekDay?
  startTime DateTime?
  endTime   DateTime?
  onDate    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  call   CallForVolunteers @relation(fields: [callId], references: [id], onDelete: Cascade)
  callId String

  @@map("call_schedules")
}

model AuditLog {
  id        String   @id @default(cuid())
  entity    String
  entityId  String
  action    String
  changes   String
  createdAt DateTime @default(now())
  createdBy String?

  @@map("audit_logs")
}

enum WeekDay {
  LUNES
  MARTES
  MIERCOLES
  JUEVES
  VIERNES
  SABADO
  DOMINGO
}

enum QuestionType {
  TEXT
  NUMBER
  BOOLEAN
  MULTIPLE
}

enum CallStatus {
  OPEN
  CLOSED
  DRAFT
}

enum ParticipationStatus {
  ENROLLED
  CONFIRMED
  REJECTED
  CANCELLED
}

enum Modality {
  PRESENTIAL
  REMOTE
  HYBRID
}

// Enums
enum UserRole {
  VOLUNTEER
  MANAGER
  ADMIN
}

enum VolunteerStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  JUSTIFIED
  LATE
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
  REMINDER
}
