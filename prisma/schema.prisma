generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  role      UserRole  @default(VOLUNTEER)
  avatar    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  volunteer   Volunteer? @relation(fields: [volunteerId], references: [id])
  volunteerId String?    @unique

  @@map("users")
}

model Volunteer {
  id        String          @id @default(cuid())
  name      String
  email     String          @unique
  phone     String
  address   String
  birthday  DateTime
  status    VolunteerStatus @default(ACTIVE)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  attendances  Attendance[]
  user         User?
  notification Notification[]

  @@map("volunteers")
}

model Attendance {
  id        String           @id @default(cuid())
  date      DateTime
  status    AttendanceStatus @default(PRESENT)
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  volunteer   Volunteer @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  volunteerId String

  @@unique([volunteerId, date])
  @@map("attendances")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  deletedAt DateTime?

  createdBy String?
  updatedBy String?
  deletedBy String?

  volunteer   Volunteer @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  volunteerId String

  @@map("notifications")
}

// Enums
enum UserRole {
  VOLUNTEER
  MANAGER
  ADMIN
}

enum VolunteerStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  JUSTIFIED
  LATE
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
  REMINDER
}
